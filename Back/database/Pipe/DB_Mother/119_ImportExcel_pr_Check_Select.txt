
---------------------------------------------------------------------------------
-- Stored procedure that will  ### Do something
-- Gets: @file_ID int,
-- Returns: @@result varchar(255)
-- Returns: @error int
---------------------------------------------------------------------------------

IF OBJECT_ID('pr_Check_Select', 'P') IS NOT NULL
DROP PROCEDURE dbo.[pr_Check_Select];
GO 


CREATE PROCEDURE [dbo].[pr_Check_Select]
	@file_ID int,
	@result varchar(255) OUTPUT,
	@error int OUTPUT,
	@errorIndexes varchar(max) OUTPUT
AS
SET NOCOUNT ON

DECLARE @SQL_STATEMENT nvarchar(max),
@iErrorCode_exec int,
@TLogMessage_ID int,
@Creator int,
@ObjectType int,
@TempTable_GUID varchar(250),
@ObjectName varchar(100),
@count int

SET @result='ERROR'

BEGIN TRY

	SELECT 
			@Creator= Creator,
			@TempTable_GUID = TempTable_GUID,
			@ObjectName = ObjectName,
			@ObjectType = ObjectType
	FROM [File] 
	WHERE ID = @file_ID

		IF OBJECT_ID('tempdb..#tempIndexError') IS NOT NULL
		DROP TABLE #tempIndexError

	CREATE TABLE #tempIndexError (
	index_ int
	)


	
		IF OBJECT_ID('tempdb..#temp') IS NOT NULL
		DROP TABLE #temp

  SELECT 
		f.Name AS NameOrigin,
		Options
  INto #temp
  FROM 
	(SELECT COLUMN_NAME
	FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TempTable_GUID AND COLUMN_NAME not like 'Station_%' ) t
JOIN 
	(SELECT form.*, dp.TypeProp 
	FROM [dbo].[ModuleForms] form
	JOIN ObservationDynProp dp ON dp.Name = form.Name --AND dp.TypeProp = 'Integer' 
	WHERE 
	Module_id = 1 AND TypeObj = @ObjectType
	AND InputType ='Select') f ON t.COLUMN_NAME = f.Name


	SET @SQL_STATEMENT = 'SELECT [index] FROM '+@TempTable_GUID+' tGuid '

	DECLARE @WhereSQL nvarchar(max)
	DECLARE @JoinSQL nvarchar(max)
	SET @JoinSQL = '@'
	SET @WhereSQL = '@'
	select  @JoinSQL =  @JoinSQL +'LEFT JOIN ('+Options+') AS sel_'+NameOrigin+' ON sel_'+NameOrigin+'.Label=tGuid.'+NameOrigin+' AND '+NameOrigin+' IS NOT NULL '
	FROM #temp

	SET @JoinSQL = REPLACE(@JoinSQL,'@LEFT',' LEFT')

	SELECT @WhereSQL = @WhereSQL+'OR sel_'+ NameOrigin + '.Label IS NULL '
	FROM #temp

	SET @WhereSQL = REPLACE(@WhereSQL,'@OR',' WHERE')

	SET @SQL_STATEMENT = @SQL_STATEMENT+@JoinSQL+@WhereSQL

	IF (SELECT COUNT(*) FROM #temp)> 0
	BEGIN
		INSERT INTO #tempIndexError
		EXEC SP_EXECUTESQL @SQL_STATEMENT;
	END 

	IF (SELECT COUNT(*) FROM #tempIndexError) > 0 
		BEGIN 
			SET @error = 1
			SET @errorIndexes = '@'
			SELECT @errorIndexes = @errorIndexes + ', '+CONVERT(VARCHAR(100),index_)
			FROM #tempIndexError
		END

	SET @errorIndexes = REPLACE(@errorIndexes,'@, ','')


END TRY
BEGIN CATCH
	SET @error = ERROR_NUMBER()

	--recording error log
	SET @SQL_STATEMENT = 'INSERT INTO NSLog.dbo.TLOG_MESSAGES ([JCRE]
      ,[LOG_LEVEL]
      ,[ORIGIN]
      ,[SCOPE]
      ,[LOGUSER]
      ,[DOMAINE]
      ,[MESSAGE_NUMBER]
      ,[LOG_MESSAGE]
      ,[OTHERSINFOS])
	  SELECT 
			GETDATE(),
			5,
			''Import excel protocol'',
			''pr_Check_Select'',
			1,
			3,
			'+CONVERT(VARCHAR(max),@error)+',
			'''+CONVERT(VARCHAR(max),REplace(ERROR_MESSAGE(),'''',''))+''',
			''@file_ID =  ''+CONVERT(VARCHAR,' +CONVERT(VARCHAR,@file_ID)+')'
			
			--SELECT @TLogMessage_ID = SCOPE_IDENTITY()	'				
	SELECT  	@SQL_STATEMENT	
	EXEC SP_EXECUTESQL @SQL_STATEMENT
					
END CATCH;

IF @@ERROR <> 0
	BEGIN
		SET @error = @@ERROR
	END
IF @error <> 0
    BEGIN
		PRINT 'ErrorCode = '+str(@error)
    END
ELSE
    BEGIN
		SET @result = 'OK'
    END
SELECT  @result,  @error, @errorIndexes


GO


INSERT INTO [dbo].[TVersion] (TVer_FileName,TVer_Date,TVer_DbName) VALUES ('119_ImportExcel_pr_Check_Select',GETDATE(),(SELECT db_name()))


GO
