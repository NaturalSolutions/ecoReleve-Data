from ..utils.stargate import WebSocketAwareResource, WebSocketView


class WebsocketsRoot(object):

    def __init__(self, name, parent):
        self._websocketsTree = {'fileImport': FileImportJobRoot}
        self.__name__ = name
        self.__parent__ = parent

    def __getitem__(self, item):
        if item in self._websocketsTree:
            return self._websocketsTree[item](item, self)


class FileImportJobRoot(object):
    """A container for File import jobs

    Gets or creates Job objects for certain ids according 
    to the temporary table GUID generated by xcel import 
    """
    def __init__(self, name, parent):
        self._jobs = {}
        self.__name__ = name
        self.__parent__ = parent

    def __getitem__(self, item):
        try:
            return self._jobs[item]
        except KeyError:
            return self.create_job(item)

    def create_job(self, id):
        job = FileImportJob(id, self)
        self._jobs[id] = job
        return job


class FileImportJob(WebSocketAwareResource):
    """This is a permanent object.

    It's responsible for maintaning a list of connected clients (websockets)
    and updating them when its state changes
    """

    def __init__(self, id, parent):
        self.__name__ = id
        self.__parent__ = parent
        self.state = "OFF"
