
IF OBJECT_ID('pr_Check_ExistingStations', 'P') IS NOT NULL
DROP PROCEDURE dbo.[pr_Check_ExistingStations];
GO 

CREATE PROCEDURE [dbo].[pr_Check_ExistingStations]
	@file_ID int,
	@result varchar(255) OUTPUT,
	@error int OUTPUT,
	@errorIndexes varchar(max) OUTPUT
AS
SET NOCOUNT ON

DECLARE @SQL_STATEMENT nvarchar(max),
@iErrorCode_exec int,
@TLogMessage_ID int,
@Creator int,
@ObjectType int,
@TempTable_GUID varchar(250),
@ObjectName varchar(100),
@count int

--,@file_ID int,
--	@result varchar(255) ,
--	@error int ,
--	@errorIndexes varchar(max) 


SET @result='ERROR'
INSERT INTO OBservation (Comments)
VALUES('TOTOTOTOTOTO')
BEGIN TRY
	SELECT 
			@Creator= Creator,
			@TempTable_GUID = TempTable_GUID,
			@ObjectName = ObjectName,
			@ObjectType = ObjectType
	FROM [File] 
	WHERE ID = @file_ID

	IF OBJECT_ID('tempdb..#tempIndexError') IS NOT NULL
		DROP TABLE #tempIndexError

	CREATE TABLE #tempIndexError (
	index_ int
	)

	SET @SQL_STATEMENT = 'SELECT [index] '
	--							+ (SELECT  CONVERT(varchar(200),(SELECT STUFF((SELECT ','+ CONVERT(varchar(200),COLUMN_NAME)+ ' AS '+REPLACE(COLUMN_NAME,'Station_','')
	--																FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TempTable_GUID AND COLUMN_NAME like 'Station_%'
	--																 FOR XML PATH('')), 1, 1, ''))) ) + ', index'
						+'
						FROM '+ @TempTable_GUID+ ' temp'
						+' WHERE EXISTS (SELECT * FROM Station s  
											WHERE s.StationDate = temp.Station_StationDate and s.LAT = temp.Station_LAT AND s.LON = temp.Station_LON) '
						;
	
	INSERT INTO #tempIndexError
	EXEC SP_EXECUTESQL @SQL_STATEMENT;

	IF (SELECT COUNT(*) FROM #tempIndexError) > 0 
		BEGIN 
			SET @error = 1
			SET @errorIndexes = (SELECT  CONVERT(varchar(200),(SELECT STUFF((SELECT ','+ CONVERT(varchar(200),index_)
																	FROM #tempIndexError
																 FOR XML PATH('')), 1, 1, ''))
											) 
								)
		END 
	--SELECT @error, @errorIndexes

	END TRY

	BEGIN CATCH
		SET @iErrorCode_exec = ERROR_NUMBER()

		--recording error log
		SET @SQL_STATEMENT = 'INSERT INTO NSLog.dbo.TLOG_MESSAGES ([JCRE]
		  ,[LOG_LEVEL]
		  ,[ORIGIN]
		  ,[SCOPE]
		  ,[LOGUSER]
		  ,[DOMAINE]
		  ,[MESSAGE_NUMBER]
		  ,[LOG_MESSAGE]
		  ,[OTHERSINFOS])
		  SELECT 
				GETDATE(),
				5,
				''Import excel protocol'',
				''pr_Check_ExistingStations'',
				1,
				3,
				@iErrorCode_exec,
				ERROR_MESSAGE(),
				''@file_ID =  '' +CONVERT(VARCHAR,@file_ID);'
			
				--SELECT @TLogMessage_ID = SCOPE_IDENTITY()	'				
			
		EXEC SP_EXECUTESQL @SQL_STATEMENT
					
	END CATCH;

	IF @@ERROR <> 0
		BEGIN
			SET @error = @@ERROR
		END
	IF @error <> 0
		BEGIN
			PRINT 'ErrorCode = '+str(@error)
		END
	ELSE
		BEGIN
			SET @result = 'OK'
		END

	SELECT @result,  @error, @errorIndexes

GO





INSERT INTO [dbo].[TVersion] (TVer_FileName,TVer_Date,TVer_DbName) VALUES ('117_ImportExcel_pr_Check_ExistingStations',GETDATE(),(SELECT db_name()))


GO
